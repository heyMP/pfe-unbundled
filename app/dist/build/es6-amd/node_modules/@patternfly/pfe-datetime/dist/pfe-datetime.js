define(["exports","../../pfelement/dist/pfelement.js"],(function(_exports,_pfelement){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_pfelement=babelHelpers.interopRequireDefault(_pfelement);
/*!
   * PatternFly Elements: PfeDatetime 1.0.0
   * @license
   * Copyright 2020 Red Hat, Inc.
   * 
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   * 
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   * 
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   * SOFTWARE.
   * 
  */
class PfeDatetime extends _pfelement.default{static get version(){return"1.0.0"}get html(){return"\n<style>:host{display:inline} /*# sourceMappingURL=pfe-datetime.min.css.map */</style>\n<span></span>"}static get tag(){return"pfe-datetime"}get styleUrl(){return"pfe-datetime.scss"}get templateUrl(){return"pfe-datetime.html"}get _dateTimeType(){return this.format||this.type||PfeDatetime.properties.format.default}static get properties(){return{format:{title:"Format",type:String,values:["local","relative"],default:"local"},oldType:{alias:"format",attr:"type"},datetime:{title:"Date and time",type:String,observer:"_datetimeChanged",prefix:!1},timestamp:{title:"Timestamp",type:String,observer:"_timestampChanged",prefix:!1}}}constructor(){super(PfeDatetime)}_datetimeChanged(oldVal,newVal){Date.parse(newVal)&&(Date.parse(newVal)&&this._datetime===Date.parse(newVal)||this.setDate(Date.parse(newVal)))}_timestampChanged(oldVal,newVal){this._timestamp!==newVal?(this._timestamp=newVal,this.setDate(new Date(1e3*newVal))):this.log("early return")}setDate(date){this._datetime=date,this.shadowRoot.querySelector("span").innerText=window.Intl?this._getTypeString():date.toLocaleString()}_getOptions(){const props={weekday:{short:"short",long:"long"},day:{numeric:"numeric","2-digit":"2-digit"},month:{short:"short",long:"long"},year:{numeric:"numeric","2-digit":"2-digit"},hour:{numeric:"numeric","2-digit":"2-digit"},minute:{numeric:"numeric","2-digit":"2-digit"},second:{numeric:"numeric","2-digit":"2-digit"},timeZoneName:{short:"short",long:"long"}};let options={};for(const prop in props){let attributeName=prop.replace(/[\w]([A-Z])/g,match=>match[0]+"-"+match[1]).toLowerCase();const value=props[prop][this.getAttribute(attributeName)];value&&(options[prop]=value)}return this.getAttribute("time-zone")&&(options.timeZone=this.getAttribute("time-zone")),options}_getTypeString(){const options=this._getOptions(),locale=this.getAttribute("locale")||navigator.language;let dt="";switch(this._dateTimeType){case"local":dt=new Intl.DateTimeFormat(locale,options).format(this._datetime);break;case"relative":dt=this._getTimeRelative(this._datetime-Date.now());break;default:dt=this._datetime}return dt}_getTimeRelative(ms){const tense=ms>0?"until":"ago";let str="just now";const s=Math.round(Math.abs(ms)/1e3),min=Math.round(s/60),h=Math.round(min/60),d=Math.round(h/24),m=Math.round(d/30),y=Math.round(m/12);return m>=18?str=y+" years":m>=12?str="a year":d>=45?str=m+" months":d>=30?str="a month":h>=36?str=d+" days":h>=24?str="a day":min>=90?str=h+" hours":min>=45?str="an hour":s>=90?str=min+" minutes":s>=45?str="a minute":s>=10&&(str=s+" seconds"),"just now"!==str?`${str} ${tense}`:str}}_pfelement.default.create(PfeDatetime);var _default=PfeDatetime;_exports.default=_default}));