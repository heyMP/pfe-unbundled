import PFElement from"../../pfelement/dist/pfelement.js";function h2rgb(v1,v2,vH){return vH<0&&(vH+=1),vH>1&&(vH-=1),6*vH<1?v1+6*(v2-v1)*vH:2*vH<1?v2:3*vH<2?v1+(v2-v1)*(2/3-vH)*6:v1}
/*!
 * PatternFly Elements: PfeAvatar 1.0.0
 * @license
 * Copyright 2020 Red Hat, Inc.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
*/
class PfeAvatar extends PFElement{static get version(){return"1.0.0"}get html(){return"\n<style>:host{display:block;position:relative;width:128px;width:var(--pfe-avatar--size,var(--pfe-avatar--width,128px));height:128px;height:var(--pfe-avatar--size,var(--pfe-avatar--width,128px))}:host canvas{width:100%;height:100%;image-rendering:optimizeSpeed;image-rendering:-moz-crisp-edges;image-rendering:-webkit-optimize-contrast;image-rendering:-o-crisp-edges;image-rendering:-o-pixelated;image-rendering:pixelated;-ms-interpolation-mode:nearest-neighbor}:host([shape=rounded]) canvas,:host([shape=rounded]) img{border-radius:calc(128px / 8 + 1px);border-radius:calc(var(--pfe-avatar--size,var(--pfe-avatar--width,128px))/ 8 + 1px)}:host([shape=circle]) canvas,:host([shape=circle]) img{border-radius:50%}:host([src]) canvas{display:none}:host([src]) img{display:block;width:100%;height:100%;-o-object-fit:cover;object-fit:cover}:host(:not([src])) img{display:none}:host([hidden]){display:none} /*# sourceMappingURL=pfe-avatar.min.css.map */</style>\n<canvas></canvas>\n<img>"}static get tag(){return"pfe-avatar"}static get properties(){return{name:{title:"Username",type:String,default:"",observer:"_updateWhenConnected"},src:{title:"Avatar image URL",type:String,observer:"_updateWhenConnected"},pattern:{title:"Shape pattern",type:String,default:PfeAvatar.patterns.squares,observer:"_updateWhenConnected"},oldName:{alias:"name",attr:"pfe-name"},oldSrc:{alias:"src",attr:"pfe-src"},oldPattern:{alias:"pattern",attr:"pfe-pattern"}}}get templateUrl(){return"pfe-avatar.html"}get styleUrl(){return"pfe-avatar.scss"}static get events(){return{connected:this.tag+":connected"}}static get patterns(){return{triangles:"triangles",squares:"squares"}}static get defaultSize(){return 128}static get defaultColors(){return"#67accf #448087 #709c6b #a35252 #826cbb"}get customColors(){return this.cssVariable("pfe-avatar--colors")}constructor(){super(PfeAvatar),this._initCanvas=this._initCanvas.bind(this)}connectedCallback(){this._initCanvas(),super.connectedCallback(),this.emitEvent(PfeAvatar.events.connected,{bubbles:!1})}_initCanvas(){this._canvas=this.shadowRoot.querySelector("canvas");const cssVarWidth=this.cssVariable("pfe-avatar--width"),size=cssVarWidth&&cssVarWidth.replace(/px$/,"")||PfeAvatar.defaultSize;this._canvas.width=size,this._canvas.height=size,this._squareSize=this._canvas.width/8,this._triangleSize=this._canvas.width/4,this._ctx=this._canvas.getContext("2d")}static _registerColors(){this.colors=[];return(this.customColors||this.defaultColors).split(/\s+/).forEach(colorCode=>{let pattern;switch(colorCode.length){case 4:if(pattern=/^#([A-f0-9])([A-f0-9])([A-f0-9])$/.exec(colorCode),pattern){pattern.shift();const color=pattern.map(c=>parseInt(c+c,16));this._registerColor(color)}else this.log("[pfe-avatar] invalid color "+colorCode);break;case 7:if(pattern=/^#([A-f0-9]{2})([A-f0-9]{2})([A-f0-9]{2})$/.exec(colorCode),pattern){pattern.shift();const color=pattern.map(c=>parseInt(c,16));this._registerColor(color)}else this.log("[pfe-avatar] invalid color "+colorCode)}}),this.colors}static _registerColor(color){PfeAvatar.colors.push({color1:`rgb(${color.join(",")})`,color2:`rgb(${this._adjustColor(color).join(",")})`})}static _adjustColor(color){const hsl=function rgb2hsl(_R,_G,_B){let H,S,L;const r=Math.max(0,Math.min(255,_R))/255,g=Math.max(0,Math.min(255,_G))/255,b=Math.max(0,Math.min(255,_B))/255,var_min=Math.min(Math.min(r,g),b),var_max=Math.max(Math.max(r,g),b),del_max=var_max-var_min;if(L=(var_max+var_min)/2,0===del_max)H=0,S=0;else{S=L<.5?del_max/(var_max+var_min):del_max/(2-var_max-var_min);const del_r=((var_max-r)/6+del_max/2)/del_max,del_g=((var_max-g)/6+del_max/2)/del_max,del_b=((var_max-b)/6+del_max/2)/del_max;r==var_max?H=del_b-del_g:g==var_max?H=1/3+del_r-del_b:b==var_max&&(H=2/3+del_g-del_r),H<0?H+=1:H>1&&(H-=1)}return[H,S,L]}(...color);return hsl[2]+=hsl[2]>.1?-.1:.1,function hsl2rgb(_H,_S,_L){let R,G,B;const H=Math.max(0,Math.min(1,_H)),S=Math.max(0,Math.min(1,_S)),L=Math.max(0,Math.min(1,_L));if(0==S)R=255*L,G=255*L,B=255*L;else{let a,b;b=L<.5?L*(1+S):L+S-S*L,a=2*L-b,R=Math.floor(255*h2rgb(a,b,H+1/3)),G=Math.floor(255*h2rgb(a,b,H)),B=Math.floor(255*h2rgb(a,b,H-1/3))}return[R,G,B]}(...hsl)}_updateWhenConnected(){this.hasAttribute("pfelement")?this.update():this.addEventListener(PfeAvatar.events.connected,()=>this.update())}update(){if(this.src)this.shadowRoot.querySelector("img").src=this.src;else{const bitPattern=function hash(str){let hash=5381,i=str.length;for(;i;)hash=33*hash^str.charCodeAt(--i);return hash>>>0}(this.name).toString(2),arrPattern=bitPattern.split("").map(n=>Number(n));this._colorIndex=Math.floor(PfeAvatar.colors.length*parseInt(bitPattern,2)/Math.pow(2,32)),this.color1=PfeAvatar.colors[this._colorIndex].color1,this.color2=PfeAvatar.colors[this._colorIndex].color2,this._clear(),this._drawBackground(),this.pattern===PfeAvatar.patterns.squares?this._drawSquarePattern(arrPattern):this.pattern===PfeAvatar.patterns.triangles&&this._drawTrianglePattern(arrPattern)}}_clear(){this._ctx.clearRect(0,0,this._canvas.width,this._canvas.height)}_drawBackground(){this._ctx.fillStyle=this.color1,this._ctx.fillRect(0,0,this._canvas.width,this._canvas.height)}_drawSquarePattern(pattern){if(this._ctx.fillStyle=this.color2,this._ctx){let i=pattern.length;for(;i--;)pattern[i]&&this._drawMirroredSquare(i%4,Math.floor(i/4))}}_drawMirroredSquare(x,y){this._ctx&&(this._drawSquare(x,y),this._drawSquare(7-x,y))}_drawSquare(x,y){this._ctx.fillRect(this._squareSize*x,this._squareSize*y,this._squareSize,this._squareSize)}_drawTrianglePattern(pattern){if(this._ctx.fillStyle=this.color2,this._ctx){let i=pattern.length;for(;i--;)if(pattern[i]){const x=Math.floor(i/2)%2,y=Math.floor(i/4),p1=[x,y],p2=[x,y],p3=[x,y];switch(i%4){case 0:p2[1]++,p3[0]++,p3[1]++;break;case 1:p2[0]++,p3[0]++,p3[1]++;break;case 2:p2[0]++,p3[1]++;break;case 3:p1[0]++,p2[0]++,p2[1]++,p3[1]++}this._drawMirroredTriangle(p1,p2,p3)}}}_drawMirroredTriangle(p1,p2,p3){this._ctx&&(this._drawTriangle(p1,p2,p3),this._drawTriangle([4-p1[0],p1[1]],[4-p2[0],p2[1]],[4-p3[0],p3[1]]))}_drawTriangle(p1,p2,p3){this._ctx.beginPath(),this._ctx.moveTo(...p1.map(c=>c*this._triangleSize)),this._ctx.lineTo(...p2.map(c=>c*this._triangleSize)),this._ctx.lineTo(...p3.map(c=>c*this._triangleSize)),this._ctx.closePath(),this._ctx.fill(),this._ctx.fill()}_drawGradient(){const gradient=this._ctx.createLinearGradient(0,this._canvas.height,this._canvas.width,0),color=this.color2;let gradientColor1=color,gradientColor2=color;/^#[A-f0-9]{3}$/.test(color)?(gradientColor1+="c",gradientColor2+="0"):/^#[A-f0-9]{6}$/.test(color)&&(gradientColor1+="cc",gradientColor2+="00"),gradient.addColorStop(0,gradientColor1),gradient.addColorStop(1,gradientColor2),gradient.addColorStop(1,gradientColor1),this._ctx.fillStyle=gradient,this._ctx.fillRect(0,0,this._canvas.width,this._canvas.height)}}PfeAvatar._registerColors(),PFElement.create(PfeAvatar);export default PfeAvatar;