let logger=()=>null;function handleWebComponentsReady(){logger("[reveal] web components ready"),function reveal(){logger("[reveal] elements ready, revealing the body"),window.document.body.removeAttribute("unresolved")}()}function isValidDefaultType(definition){return definition.hasOwnProperty("default")&&definition.default.constructor===definition.type}Array.prototype.includes||Object.defineProperty(Array.prototype,"includes",{value:function(valueToFind,fromIndex){if(null==this)throw new TypeError('"this" is null or not defined');var o=Object(this),len=o.length>>>0;if(0===len)return!1;var x,y,n=0|fromIndex,k=Math.max(n>=0?n:len-Math.abs(n),0);for(;k<len;){if((x=o[k])===(y=valueToFind)||"number"==typeof x&&"number"==typeof y&&isNaN(x)&&isNaN(y))return!0;k++}return!1}}),Object.entries||(Object.entries=function(obj){for(var ownProps=Object.keys(obj),i=ownProps.length,resArray=new Array(i);i--;)resArray[i]=[ownProps[i],obj[ownProps[i]]];return resArray})
/*!
 * PatternFly Elements: PFElement 1.0.0
 * @license
 * Copyright 2020 Red Hat, Inc.
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * 
*/;class PFElement extends HTMLElement{static debugLog(preference=null){return null!==preference&&(PFElement._debugLog=!!preference),PFElement._debugLog}static log(...msgs){PFElement.debugLog()&&console.log(...msgs)}log(...msgs){PFElement.log(`[${this.tag}${this.id?"#"+this.id:""}]: ${msgs.join(", ")}`)}static warn(...msgs){console.warn(...msgs)}warn(...msgs){PFElement.warn(`[${this.tag}${this.id?"#"+this.id:""}]: ${msgs.join(", ")}`)}static error(...msgs){throw new Error([...msgs].join(" "))}error(...msgs){PFElement.error(`[${this.tag}${this.id?"#"+this.id:""}]:`,...msgs)}static get PfeTypes(){return{Container:"container",Content:"content",Combo:"combo"}}static get version(){return"{{version}}"}get version(){return this._pfeClass.version}static get properties(){return{pfelement:{title:"Upgraded flag",type:Boolean,default:!0,observer:"_upgradeObserver"},on:{title:"Context",description:"Describes the visual context (backgrounds).",type:String,values:["light","dark","saturated"],default:el=>el.contextVariable,observer:"_onObserver"},context:{title:"Context hook",description:"Lets you override the system-set context.",type:String,values:["light","dark","saturated"],observer:"_contextObserver"},oldTheme:{type:String,values:["light","dark","saturated"],alias:"context",attr:"pfe-theme"},_style:{title:"Custom styles",type:String,attr:"style",observer:"_inlineStyleObserver"},type:{title:"Component type",type:String,values:["container","content","combo"]}}}static get observedAttributes(){const properties=this.allProperties;if(properties){return[...Object.keys(properties).filter(prop=>properties[prop].observer||properties[prop].cascade||properties[prop].alias).map(p=>this._convertPropNameToAttrName(p))]}}get randomId(){return"pfe-"+Math.random().toString(36).substr(2,9)}set contextVariable(value){this.cssVariable("context",value)}get contextVariable(){return this.cssVariable("context")||this.cssVariable("theme")}hasLightDOM(){return this.children.length||this.textContent.trim().length}hasSlot(name){if(name)switch(typeof name){case"string":return[...this.children].filter(child=>child.hasAttribute("slot")&&child.getAttribute("slot")===name).length>0;case"array":return name.reduce(n=>[...this.children].filter(child=>child.hasAttribute("slot")&&child.getAttribute("slot")===n).length>0);default:return void this.warn("Did not recognize the type of the name provided to hasSlot; this funciton can accept a string or an array.")}else this.warn("Please provide at least one slot name for which to search.")}getSlot(name="unassigned"){return"unassigned"!==name?[...this.children].filter(child=>child.hasAttribute("slot")&&child.getAttribute("slot")===name):[...this.children].filter(child=>!child.hasAttribute("slot"))}cssVariable(name,value,element=this){return name="--"!==name.substr(0,2)?"--"+name:name,value?(element.style.setProperty(name,value),value):window.getComputedStyle(element).getPropertyValue(name).trim()||null}contextUpdate(){[...this.querySelectorAll("*"),...this.shadowRoot.querySelectorAll("*")].filter(item=>"pfe-"===item.tagName.toLowerCase().slice(0,4)).map(child=>{this.log("Update context of "+child.tag),Promise.all([customElements.whenDefined(child.tagName.toLowerCase())]).then(()=>{child.resetContext(this.on)})})}resetContext(fallback){this.log("Resetting context on "+this.tag);let value=this.context||this.contextVariable||fallback;this.on=value}constructor(pfeClass,{type=null,delayRender=!1}={}){super(),this._pfeClass=pfeClass,this.tag=pfeClass.tag,this._parseObserver=this._parseObserver.bind(this),this.schemaProps=pfeClass.schemaProperties,this.slots=pfeClass.slots,this.template=document.createElement("template"),type&&this._pfeClass.allProperties.type&&(this._pfeClass.allProperties.type.default=type),this._initializeProperties(),this.attachShadow({mode:"open"}),delayRender||this.render()}connectedCallback(){this._initializeAttributeDefaults(),window.ShadyCSS&&window.ShadyCSS.styleElement(this),"object"==typeof this.slots&&(this._slotsObserver=new MutationObserver(()=>this._initializeSlots(this.tag,this.slots)),this._slotsObserver.observe(this,{childList:!0}),this._initializeSlots(this.tag,this.slots)),this._cascadeObserver&&this._cascadeObserver.observe(this,{attributes:!0,childList:!0,subtree:!0})}disconnectedCallback(){this._cascadeObserver&&this._cascadeObserver.disconnect(),this._slotsObserver&&this._slotsObserver.disconnect()}attributeChangedCallback(attr,oldVal,newVal){if(!this._pfeClass.allProperties)return;let propName=this._pfeClass._attr2prop(attr);const propDef=this._pfeClass.allProperties[propName];if(propDef){if(propDef.alias){const aliasedPropDef=this._pfeClass.allProperties[propDef.alias],aliasedAttr=this._pfeClass._prop2attr(propDef.alias);this.getAttribute(aliasedAttr)!==newVal&&(this[propDef.alias]=this._castPropertyValue(aliasedPropDef,newVal))}propDef.observer&&this[propDef.observer](this._castPropertyValue(propDef,oldVal),this._castPropertyValue(propDef,newVal)),propDef.cascade&&this._copyAttribute(attr,this._pfeClass._convertSelectorsToArray(propDef.cascade))}}render(){this.shadowRoot.innerHTML="",this.template.innerHTML=this.html,window.ShadyCSS&&window.ShadyCSS.prepareTemplate(this.template,this.tag),this.shadowRoot.appendChild(this.template.content.cloneNode(!0)),this.log("render"),this.resetContext()}emitEvent(name,{bubbles=!0,cancelable=!1,composed=!1,detail={}}={}){this.log("Custom event: "+name),this.dispatchEvent(new CustomEvent(name,{bubbles,cancelable,composed,detail}))}cascadeProperties(nodeList){const cascade=this._pfeClass._getCache("cascadingProperties");if(cascade){window.ShadyCSS&&this._cascadeObserver&&this._cascadeObserver.disconnect();let selectors=Object.keys(cascade);if(nodeList&&(selectors=[],[...nodeList].forEach(nodeItem=>{Object.keys(cascade).map(selector=>{nodeItem.matches&&nodeItem.matches(selector)&&selectors.push(selector)})})),selectors){const components=selectors.filter(item=>"pfe-"===item.slice(0,"pfe".length+1)).map(name=>customElements.whenDefined(name));components?Promise.all(components).then(()=>{this._copyAttributes(selectors,cascade)}):this._copyAttributes(selectors,cascade)}window.ShadyCSS&&this._cascadeObserver&&this._cascadeObserver.observe(this,{attributes:!0,childList:!0,subtree:!0})}}_upgradeObserver(){this.classList.add("PFElement")}_contextObserver(oldValue,newValue){newValue&&(oldValue&&oldValue!==newValue||!oldValue)&&(this.on=newValue,this.cssVariable("context",newValue))}_onObserver(oldValue,newValue){(oldValue&&oldValue!==newValue||newValue&&!oldValue)&&this.contextUpdate()}_inlineStyleObserver(oldValue,newValue){this.log("Style observer activated on "+this.tag);let newContext="";let found=/--(?:context|theme):\s*(?:\"*(light|dark|saturated)\"*)/gi.exec(newValue);found&&(newContext=found[1],newContext===this.on||this.context||(this.on=newContext))}_parseObserver(mutationsList){for(let mutation of mutationsList)"childList"===mutation.type&&mutation.addedNodes.length&&this.cascadeProperties(mutation.addedNodes)}static _validateProperties(){for(let propName in this.allProperties){const propDef=this.allProperties[propName];[String,Number,Boolean].includes(propDef.type||String)||this.error(`Property "${propName}" on ${this.name} must have type String, Number, or Boolean.`),/^[a-z_]/.test(propName)||this.error(`Property ${this.name}.${propName} defined, but prop names must begin with a lower-case letter or an underscore`);const isFunction="function"==typeof propDef.default;!propDef.default||isValidDefaultType(propDef)||isFunction||this.error(`[${this.name}] The default value \`${propDef.default}\` does not match the assigned type ${propDef.type.name} for the '${propName}' property`)}}_castPropertyValue(propDef,attrValue){switch(propDef.type){case Number:return{[attrValue]:Number(attrValue),null:null,NaN:NaN,undefined:void 0}[attrValue];case Boolean:return null!==attrValue;case String:return{[attrValue]:attrValue,undefined:void 0}[attrValue];default:return attrValue}}_assignValueToAttribute(obj,attr,value){obj.type===Boolean&&!value||null===value||void 0===value?this.removeAttribute(attr):obj.type===Boolean&&"boolean"==typeof value?this.setAttribute(attr,""):(obj.values&&this._validateAttributeValue(obj,attr,value),this.setAttribute(attr,value))}_initializeSlots(tag,slots){this.log("Validate slots..."),window.ShadyCSS&&this._slotsObserver&&this._slotsObserver.disconnect(),Object.keys(slots).forEach(slot=>{let slotObj=slots[slot];if("object"==typeof slotObj){let slotExists=!1,result=[];slotObj.namedSlot?(result=this.getSlot(`${tag}--${slot}`),result.length>0&&(slotObj.nodes=result,slotExists=!0),result=this.getSlot(""+slot),result.length>0&&(slotObj.nodes=result,slotExists=!0)):(result=[...this.children].filter(child=>!child.hasAttribute("slot")),result.length>0&&(slotObj.nodes=result,slotExists=!0)),slotExists?this.setAttribute("has_"+slot,""):this.removeAttribute("has_"+slot)}}),this.log("Slots validated."),window.ShadyCSS&&this._slotsObserver&&this._slotsObserver.observe(this,{childList:!0})}_initializeProperties(){const properties=this._pfeClass.allProperties;let hasCascade=!1;for(let propName in properties){const propDef=properties[propName];if(void 0!==this[propName])this.log(`Property "${propName}" on ${this.constructor.name} cannot be defined because the property name is reserved`);else{const attrName=this._pfeClass._prop2attr(propName);propDef.cascade&&(hasCascade=!0),Object.defineProperty(this,propName,{get:()=>{const attrValue=this.getAttribute(attrName);return this._castPropertyValue(propDef,attrValue)},set:rawNewVal=>(this._assignValueToAttribute(propDef,attrName,rawNewVal),rawNewVal),writeable:!0,enumerable:!0,configurable:!1})}}hasCascade&&(this._cascadeObserver=new MutationObserver(this._parseObserver))}_initializeAttributeDefaults(){const properties=this._pfeClass.allProperties;for(let propName in properties){const propDef=properties[propName],attrName=this._pfeClass._prop2attr(propName);if(propDef.hasOwnProperty("default")){let value=propDef.default;"function"==typeof propDef.default&&(value=propDef.default(this)),this.hasAttribute(attrName)||this._assignValueToAttribute(propDef,attrName,value)}}}_validateAttributeValue(propDef,attr,value){return Array.isArray(propDef.values)&&propDef.values.length>0&&!propDef.values.includes(value)&&this.warn(`${value} is not a valid value for ${attr}. Please provide one of the following values: ${propDef.values.join(", ")}`),value}static _prop2attr(propName){return this._getCache("prop2attr")[propName]}static _attr2prop(attrName){return this._getCache("attr2prop")[attrName]}static _convertPropNameToAttrName(propName){const propDef=this.allProperties[propName];return propDef.attr?propDef.attr:propName.replace(/^_/,"").replace(/^[A-Z]/,l=>l.toLowerCase()).replace(/[A-Z]/g,l=>"-"+l.toLowerCase())}static _convertAttrNameToPropName(attrName){for(let prop in this.allProperties)if(this.allProperties[prop].attr===attrName)return prop;return attrName.replace(/-([A-Za-z])/g,l=>l[1].toUpperCase())}_copyAttributes(selectors,set){selectors.forEach(selector=>{set[selector].forEach(attr=>{this._copyAttribute(attr,selector)})})}_copyAttribute(name,to){const recipients=[...this.querySelectorAll(to),...this.shadowRoot.querySelectorAll(to)],value=this.getAttribute(name),fname=null==value?"removeAttribute":"setAttribute";for(const node of recipients)node[fname](name,value)}static _convertSelectorsToArray(selectors){if(selectors){if("string"==typeof selectors)return selectors.split(",");if("array"==typeof selectors||"object"==typeof selectors)return selectors;this.warn(`selectors should be provided as a string, array, or object; received: ${typeof selectors}.`)}}static _parsePropertiesForCascade(mergedProperties){let cascadingProperties={};for(const[propName,config]of Object.entries(mergedProperties)){let cascadeTo=this._convertSelectorsToArray(config.cascade);cascadeTo&&cascadeTo.map(nodeItem=>{let attr=this._prop2attr(propName);cascadingProperties[nodeItem]?cascadingProperties[nodeItem].push(attr):cascadingProperties[nodeItem]=[attr]})}return cascadingProperties}static create(pfe){pfe._createCache(),pfe._populateCache(pfe),pfe._validateProperties(),window.customElements.define(pfe.tag,pfe)}static _createCache(){this._cache={properties:{},globalProperties:{},componentProperties:{},cascadingProperties:{},attr2prop:{},prop2attr:{}}}static _setCache(namespace,object){this._cache[namespace]=object}static _getCache(namespace){return namespace?this._cache[namespace]:this._cache}static _populateCache(pfe){const mergedProperties={...pfe.properties,...PFElement.properties};pfe._setCache("componentProperties",pfe.properties),pfe._setCache("globalProperties",PFElement.properties),pfe._setCache("properties",mergedProperties);const prop2attr={},attr2prop={};for(let propName in mergedProperties){const attrName=this._convertPropNameToAttrName(propName);prop2attr[propName]=attrName,attr2prop[attrName]=propName}pfe._setCache("attr2prop",attr2prop),pfe._setCache("prop2attr",prop2attr);const cascadingProperties=this._parsePropertiesForCascade(mergedProperties);Object.keys(cascadingProperties)&&pfe._setCache("cascadingProperties",cascadingProperties)}static get allProperties(){return this._getCache("properties")}static get cascadingProperties(){return this._getCache("cascadingProperties")}}!function autoReveal(logFunction){logger=logFunction;const polyfillPresent=window.WebComponents,polyfillReady=polyfillPresent&&window.WebComponents.ready;!polyfillPresent||polyfillReady?handleWebComponentsReady():window.addEventListener("WebComponentsReady",handleWebComponentsReady)}(PFElement.log);export default PFElement;